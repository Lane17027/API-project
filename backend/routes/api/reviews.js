const express = require("express");

const { requireAuth } = require("../../utils/auth");
const {
  User,
  Review,
  Spot,
  ReviewImage,
  SpotImage,
} = require("../../db/models");

const router = express.Router();

//Get all Reviews of the Current User
router.get("/current", requireAuth, async (req, res, next) => {
  const { user } = req;
  const userId = user.id;

  const myReviews = await Review.findAll({
    where: { userId },
    include: [
      {
        model: User,
        attributes: ["id", "firstName", "lastName"],
      },
      {
        model: Spot,
        attributes: [
          "id",
          "ownerId",
          "address",
          "city",
          "state",
          "country",
          "lat",
          "lng",
          "name",
          "price",
        ],
      },
      {
        model: ReviewImage,
        attributes: ["id", "url"],
      },
    ],
  });

  if (!myReviews.length) {
    return res.status(404).json({
      message: "This user does not have any reviews",
    });
  }

  for (let review of myReviews) {
    const previewImage = await SpotImage.findOne({
      where: { spotId: review.spotId },
    });
    if (!previewImage) {
      review.Spot.dataValues.previewImage =
        "This property doesn't have a previewImage";
    } else {
      review.Spot.dataValues.previewImage = previewImage.url;
    }
  }

  res.status(200).json({ Reviews: myReviews });
});

//Add an Image to a Review based on the Review's id
router.post("/:reviewId/images", requireAuth, async (req, res, next) => {
  const { user } = req;
  const { url } = req.body;
  const reviewId = req.params.reviewId;

  const review = await Review.findByPk(reviewId);

  const allReviewImage = await ReviewImage.findAll({
    where: {
      reviewId,
    },
  });

  if (!review) {
    return res.status(404).json("Review couldn't be found");
  }

  if (user.id !== review.userId) {
    return res.status(403).json("Forbidden");
  }

  if (allReviewImage.length >= 10) {
    return res
      .status(403)
      .json("Maximum number of images for this resource was reached");
  }

  const newReviewImg = await review.createReviewImage({
    url,
  });

  res.json({
    id: newReviewImg.id,
    url: newReviewImg.url,
  });
});

//Edit a review
router.put("/:reviewId", async (req, res, next) => {
  const { reviewId } = req.params;
  const { review, stars } = req.body;

  let idReview = await Review.findByPk(reviewId);

  if (!idReview) {
    return res.status(404).json("Review couldn't be found");
  }

  if (!review || stars > 5 || stars < 1) {
    return res.status(400).json({
      message: "Bad Request", // (or "Validation error" if generated by Sequelize),
      errors: {
        review: "Review text is required",
        stars: "Stars must be an integer from 1 to 5",
      },
    });
  }

  idReview.review = review;
  idReview.stars = stars;

  await idReview.save();

  res.status(200).json({
    id: idReview.id,
    userId: idReview.userId,
    spotId: idReview.spotId,
    review: idReview.review,
    stars: idReview.stars,
    createdAt: idReview.createdAt,
    updatedAt: idReview.updatedAt,
  });
});
// router.put("/:reviewId", requireAuth, async (req, res, next) => {
//   const { user } = req;
//   const { reviewId } = req.params;
//   const { review, stars } = req.body;

//   let idReview = await Review.findByPk(reviewId);

//   if (!idReview) {
//     return res.status(404).json("Review couldn't be found");
//   }

//   if (user.id !== idReview.userId) {
//     return res.status(403).json("Forbidden");
//   }

//   if (!review || stars > 5 || stars < 1) {
//     return res.status(400).json({
//       message: "Bad Request", // (or "Validation error" if generated by Sequelize),
//       errors: {
//         review: "Review text is required",
//         stars: "Stars must be an integer from 1 to 5",
//       },
//     });
//   }

//   idReview.review = review;
//   idReview.stars = stars;

//   await idReview.save();

//   res.status(200).json({
//     id: idReview.id,
//     userId: idReview.userId,
//     spotId: idReview.spotId,
//     review: idReview.review,
//     stars: idReview.stars,
//     createdAt: idReview.createdAt,
//     updatedAt: idReview.updatedAt,
//   });
// });

//Delete a Review
router.delete("/:reviewId", async (req, res, next) => {
  const { reviewId } = req.params;

  let idReview = await Review.findByPk(reviewId);

  if (!idReview) {
    return res.status(404).json("Review couldn't be found");
  }

  await idReview.destroy();

  res.status(200).json({
    message: "Successfully deleted",
  });
});

//with auth
// router.delete("/:reviewId", requireAuth, async (req, res, next) => {
//   const { reviewId } = req.params;
//   const ownerId = req.user.id;

//   let idReview = await Review.findByPk(reviewId);

//   if (!idReview) {
//     return res.status(404).json("Review couldn't be found");
//   }

//   if (ownerId !== idReview.userId) {
//     return res.status(403).json({
//       message: "You are not authorized to delete this review",
//     });
//   }
//   await idReview.destroy();

//   res.status(200).json({
//     message: "Successfully deleted",
//   });
// });

module.exports = router;
